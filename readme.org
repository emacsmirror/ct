Utilities for tweaking colors with properties from various color spaces. Visualized in [[https://notes.neeasade.net/color-spaces.html][this blog post]], used to create [[https://github.com/neeasade/tarps][tarps]].

** Installation

Install with [[https://github.com/raxod502/straight.el][straight.el]]:

#+begin_src emacs-lisp
(straight-use-package
 '(color-tools
   :host github
   :repo "neeasade/color-tools.el"
   :branch "master"))
#+end_src

*** Dependencies

- [[https://github.com/magnars/dash.el][dash.el]]
- [[https://github.com/hsluv/hsluv-emacs][hsluv.el]]

** Examples:

Supported color spaces: ~lab~ ~lch~ ~hsl~ ~hsv~ ~hsluv~ ~hpluv~. Generally, scalar values fall within range 0 to 100 (consistent interface across spaces for the convenience of using this library). Exceptions are: Hue (0 to 360), and the AB values in ~lab~, which are -100 to 100.

*** Color creation

#+begin_src emacs-lisp
(ct-make-lab 50 30 40)

;; => "#b36033"


(ct-make-hsl 60 60 70)

;; => "#e0e084"
#+end_src

*** Color inspection

#+begin_src emacs-lisp
(ct-get-lab "#b36033")

;; => (49.72678146037228 29.94907362859206 39.78635241058663)


(ct-get-lab-b "#b36033")

;; => 39.78635241058663
#+end_src

*** Color property tweaking

#+begin_src emacs-lisp
;; complement color by flipping hue:
(ct-transform-lch "#b36033"
  (lambda (L C H)
    (list L C (+ 180 H))))

;; => "#0086b9"


;; 1.5x lightness:
(ct-transform-lch-l "#b36033" (lambda (L) (* 1.5 L)))

;; => "#fea06f"


;; max chroma (notice you may pass a function or value):
(ct-transform-lch-c "#b36033" 100)

;; => "#dc3a00"
#+end_src

*** Contrast levels

#+begin_src emacs-lisp
(ct-contrast-ratio "#dddddd" "#222222")

;; => 11.713614348620013


;; tint to a contrast ratio:
(ct-iterate
  ;; start color
  "#eeeeee"
  ;; action
  'ct-lab-darken
  ;; predicate (check contrast against background)
  (fn (> (ct-contrast-ratio <> "#eeeeee")
        4.5)))

;; => "#6c6c6c"


;; sugar for the above:
(ct-tint-ratio "#eeeeee" "#eeeeee" 4.5)

;; => "#6c6c6c"
#+end_src

*** Hue rotation

#+begin_src emacs-lisp
(ct-rotation-hsluv
  (ct-make-hsluv 0 50 50)
  ;; degrees
  60)

;; => ("#bb556d" "#887351" "#5d7f51" "#547e78" "#597a97" "#a05dac")
#+end_src


*** Gotchas

Some colors as defined in color spaces may not be represented in the RGB space (and vice versa). The transformation functions here clamp values going out, but not coming in. One example is the narrowly scoped ~hpluv~ space:

#+begin_src emacs-lisp
(ct-get-hpluv "#dd00cc")

;; these values are way out of range!
;; => (314.3830496716472 282.01497572464575 51.53528501195089)

;; notice we ask for the same color back, but the transform functions clamp the output to maximum HPL values:
(ct-transform-hpluv
"#dd00cc"
 (lambda (H P L) (list H P L)))

;; => "#9f6898"
#+end_src

*** Testing

Right now testing happens by using the `ct-make-*` functions(these use the transform functions, which make up the basis for all the color space functions) against:

- https://css.land/lch/
- http://colorizer.org/

** Related (Emacs)

- https://github.com/emacs-mirror/emacs/blob/master/lisp/color.el
- https://github.com/emacsfodder/kurecolor
- https://github.com/yurikhan/yk-color
- https://github.com/hsluv/hsluv-emacs

** Related (colors)

- http://colorizer.org/
- https://peteroupc.github.io/colorgen.html
- https://www.w3.org/TR/WCAG20/#relativeluminancedef
- https://en.wikipedia.org/wiki/CIELAB_color_space
